import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

public class Game {
	
	JFrame window;
	Container con;
	JPanel titleNamePanel, startButtonPanel, mainTextPanel, choiceButtonPanel, playerPanel;
	JLabel titleNameLabel, hpLabel, hpLabelNumber, weaponLabel, weaponLabelName, mainTextArea;
	Font titleFont = new Font("Times New Roman", Font.PLAIN, 73);
	Font normalFont = new Font("Times New Roman", Font.PLAIN, 28);
	JButton startButton, choice1, choice2, choice3, choice4;
	int playerHP;
	String weapon, position;
	
	TitleScreenHandler tsHandler = new TitleScreenHandler();
	ChoiceHandler choiceHandler = new ChoiceHandler();

	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
			new Game();
	}
	
	public Game(){
		
		window = new JFrame();
		window.setSize(1280,720);//Size of window
		window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);//Able to close program
		window.getContentPane().setBackground(Color.black);//Colour of window
		window.setLayout(null);//Disable default layout for game
		window.setVisible(true);//To see the window
		con = window.getContentPane();//Base layer
		
		titleNamePanel = new JPanel();//Panel initialization 
		titleNamePanel.setBounds(330, 100, 600, 150);//Size and location of panel
		titleNamePanel.setBackground(Color.black);//Colour of panel
		titleNameLabel = new JLabel("Zombie Apocalypse");//Text for title to be placed on panel
		titleNameLabel.setForeground(Color.white);//Colour of Text
		titleNameLabel.setFont(titleFont);//Apply font to text
		
		startButtonPanel = new JPanel();//Initialization of button frame
		startButtonPanel.setBounds(530, 400, 200, 100);//Size and location of button frame
		startButtonPanel.setBackground(Color.black);//Colour of button frame
		startButton = new JButton("Begin Game");//Button initialization 
		startButton.setBackground(Color.black);//Colour of button background
		startButton.setForeground(Color.white);//Colour of text on top of button
		startButton.setFont(normalFont);//Apply font to button text
		startButton.addActionListener(tsHandler);//Forwards to "TitleScreenHandler" ActionListener when button is clicked
		startButton.setFocusPainted(false);//Disable button focus
		//Alternate way to remove focus: "startButton.setFocusable(false);"
		
		titleNamePanel.add(titleNameLabel);//Place text on Panel
		startButtonPanel.add(startButton);//Place button on panel
		
		con.add(titleNamePanel);//Add panel to container, (Text panel Layer)
		con.add(startButtonPanel);//Add panel to container, (Button layer)
		window.setVisible(true);//To see the window
	}
	
	public void createGameScreen(){
		
		titleNamePanel.setVisible(false);//Disables this panel when createGameScreen is called
		startButtonPanel.setVisible(false);//Disables this panel when createGameScreen is called
		mainTextPanel = new JPanel();//Text panel initialization 
		mainTextPanel.setBounds(20, 100, 1150, 200);//Size and location of panel
		mainTextPanel.setBackground(Color.black);//Colour of panel
		con.add(mainTextPanel);//Add panel to container, (Text panel Layer)
		
		mainTextArea = new JLabel();//Initializes placement for text
		mainTextArea.setBounds(100, 100, 1150, 250);//Size and location of area
		mainTextArea.setBackground(Color.black);//Colour of area
		mainTextArea.setForeground(Color.white);//Colour of text in area
		mainTextArea.setFont(normalFont);//Apply font to text
		JScrollPane scrollPane = new JScrollPane(mainTextArea);//******THE IMPLEMENTATION OF THIS FEATURE IS STILL IN PROGRESS******
		mainTextPanel.add(mainTextArea);//Add text area to Text panel, (Text area layer)
		
		choiceButtonPanel = new JPanel();//Initialization of button frame
		choiceButtonPanel.setBounds(210, 350, 800, 250);//Size and location of panel
		choiceButtonPanel.setBackground(Color.black);//Colour of panel
		choiceButtonPanel.setLayout(new GridLayout(4,1));//Formats buttons to four individual rows
		con.add(choiceButtonPanel);//Add panel to container, (Button layer)
		
		choice1 = new JButton("Choice 1");//Button initialization
		choice1.setBackground(Color.black);//Colour of button background
		choice1.setForeground(Color.white);//Colour of text on top of button
		choice1.setFont(normalFont);//Apply font to text on button
		choice1.setFocusPainted(false);//Disable button focus
		choice1.addActionListener(choiceHandler);//Forwards to "ChoiceHandler" ActionListener when button is clicked
		choice1.setActionCommand("c1");//Identifies to program which specific choice this button correlates to
		choiceButtonPanel.add(choice1);//Add Button on panel
		
		choice2 = new JButton("Choice 2");//Button initialization
		choice2.setBackground(Color.black);//Colour of button background
		choice2.setForeground(Color.white);//Colour of text on top of button
		choice2.setFont(normalFont);//Apply font to text on button
		choice2.setFocusPainted(false);//Disable button focus
		choice2.addActionListener(choiceHandler);//Forwards to "ChoiceHandler" ActionListener when button is clicked
		choice2.setActionCommand("c2");//Identifies to program which specific choice this button correlates to
		choiceButtonPanel.add(choice2);//Add Button on panel
		
		choice3 = new JButton("Choice 3");//Button initialization
		choice3.setBackground(Color.black);//Colour of button background
		choice3.setForeground(Color.white);//Colour of text on top of button
		choice3.setFont(normalFont);//Apply font to text on button
		choice3.setFocusPainted(false);//Disable button focus
		choice3.addActionListener(choiceHandler);//Forwards to "ChoiceHandler" ActionListener when button is clicked
		choice3.setActionCommand("c3");//Identifies to program which specific choice this button correlates to
		choiceButtonPanel.add(choice3);//Add Button on panel
		
		choice4 = new JButton("Choice 4");//Button initialization
		choice4.setBackground(Color.black);//Colour of button background
		choice4.setForeground(Color.white);//Colour of text on top of button
		choice4.setFont(normalFont);//Apply font to text on button
		choice4.setFocusPainted(false);//Disable button focus
		choice4.addActionListener(choiceHandler);//Forwards to "ChoiceHandler" ActionListener when button is clicked
		choice4.setActionCommand("c4");//Identifies to program which specific choice this button correlates to
		choiceButtonPanel.add(choice4);//Add Button on panel
		
		playerPanel = new JPanel();//Panel initialization 
		playerPanel.setBounds(400, 20, 500, 50);//Size and location of panel
		playerPanel.setBackground(Color.black);//Colour of panel
		playerPanel.setLayout(new GridLayout(1,4));//Layout of panel to four columns
		con.add(playerPanel);//Add panel to container
		
		hpLabel = new JLabel("HP:");//Text for HP label to be placed
		hpLabel.setFont(normalFont);//Font selection
		hpLabel.setForeground(Color.white);//Font colour
		playerPanel.add(hpLabel);//Add HP text to  panel
		
		hpLabelNumber = new JLabel();//Text for HP value to be placed
		hpLabelNumber.setFont(normalFont);//Font selection
		hpLabelNumber.setForeground(Color.white);//Font colour
		playerPanel.add(hpLabelNumber);//Add label to panel
		
		weaponLabel = new JLabel("Weapon: ");//Text for weapon label to be placed
		weaponLabel.setFont(normalFont);//Font selection
		weaponLabel.setForeground(Color.white);//Font colour
		playerPanel.add(weaponLabel);//Add label to panel
		
		weaponLabelName = new JLabel();//Text for weapon name to be placed
		weaponLabelName.setFont(normalFont);//Font selection
		weaponLabelName.setForeground(Color.white);//Font colour
		playerPanel.add(weaponLabelName);//Add label to panel
		
		playerSetup();//Directs program to playerSetup method
		
	}
	public void playerSetup(){//Initializes the playerSetup method
		playerHP = 15;//Set initial player's HP
		weapon = "Machete";//Set initial player's weapon
		weaponLabelName.setText(weapon);//Display weapon text on label
		hpLabelNumber.setText("" + playerHP);//Display integer HP value
		
		
		main();//Directs to main method
	}
	public void main(){//Initializes the playerSetup method
		position = "main";//Indication of which method is currently running
		mainTextArea.setText("You are on a truck going to your best friend Marty Bâ€™s house.");//Placement for text
		choice1.setText("Continue");//Display text on button
		choice2.setText("");//Display text on button
		choice3.setText("");//Display text on button
		choice4.setText("");//Display text on button
	}
	public void martyshouse(){//Initializes the Marty screen method
		position = "martyshouse";//Indication of which method is currently running
		mainTextArea.setText("<html>You are in the Wizard's house.<BR>Marty is on his chair charging his really dying hard 9V batteries.<BR>What do you do?<html>");//Placement for text
		choice1.setText("Approach the wizard carefully");//Display text on button
		choice2.setText("Attack him with a fully charged 9V battery");//Display text on button
		choice3.setText("Disconnect his power");//Display text on button
		choice4.setText("Run back out while you can");//Display text on button
	}
	public void talkmarty(){//Initializes the talkmarty screen method
		position = "talkmarty";//Indication of which method is currently running
		mainTextArea.setText("<html>Hello PEEPUL!!<BR>Oh sorry, I did not realize that it's just you, (USERNAME)<BR>Would you like to watch an episode of 'Just for laughs' with me?<html>");//Placement for text
		choice1.setText("RUNNNNNNNN!!!!!!!");//Display text on button
		choice2.setText("RUNNNNNNNN!!!!!!!");//Display text on button
		choice3.setText("RUNNNNNNNN!!!!!!!");//Display text on button
		choice4.setText("RUNNNNNNNN!!!!!!!");//Display text on button
	}
	
	
	
	
	
	
	
	
	
	
	public class TitleScreenHandler implements ActionListener{//Interface for receiving an action event (Button press)
		
		public void actionPerformed(ActionEvent event){//Indicates that an action has occurred
			
			createGameScreen();//This is called after action has been detected
	  }
   }
	public class ChoiceHandler implements ActionListener{
		
		public void actionPerformed(ActionEvent event){
			
			String yourChoice = event.getActionCommand();//Recognizes which choice button is clicked
			
			switch(position){//Determines which method is being processed
			case "main"://indicates which method is being processed
				switch(yourChoice){//Determines which choice button was clicked
				case "c1": martyshouse(); break;//Result of choice 1 button click
				case "c2": break;//Result of choice 2 button click
				case "c3": break;//Result of choice 3 button click
				case "c4": break;//Result of choice 4 button click
				} 
				break;
			case "martyshouse"://indicates which method is being processed
				switch(yourChoice){//Determines which choice button was clicked
				case "c1": talkmarty(); break;//Result of choice 1 button click
				case "c2": break;//Result of choice 2 button click
				case "c3": break;//Result of choice 3 button click
				case "c4": break;//Result of choice 4 button click
				} 
				break;
			case "talkmarty"://indicates which method is being processed
				switch(yourChoice){//Determines which choice button was clicked
				case "c1": main(); break;//Result of choice 1 button click
				case "c2": main(); break;//Result of choice 2 button click
				case "c3": main(); break;//Result of choice 3 button click
				case "c4": main(); break;//Result of choice 4 button click
				}
			}
		}
	}
	
	
	
}
