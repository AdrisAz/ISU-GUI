import java.awt.Color;
import java.awt.Container;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import java.util.*;

public class Game {
	
	JFrame window;
	Container con;
	JPanel titleNamePanel, startButtonPanel, mainTextPanel, choiceButtonPanel, playerPanel, imagePanel, hpPanel, weaponPanel;
	JLabel titleNameLabel, hpLabel, hpLabelNumber, weaponLabel, weaponLabelName, imageLabel;
	Font titleFont = new Font("Times New Roman", Font.BOLD, 73);
	Font normalFont = new Font("Times New Roman", Font.BOLD, 25);
	Font choiceFont = new Font("Times New Roman", Font.BOLD, 22);
	JButton startButton, choice1, choice2, choice3, choice4;
	int playerHP, zombieHP;
	String weapon, position;
	ImageIcon image;
	JTextArea mainTextArea;
	
	TitleScreenHandler tsHandler = new TitleScreenHandler();
	ChoiceHandler choiceHandler = new ChoiceHandler();

	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
			new Game();
	}
	
	public Game(){
		
		window = new JFrame();//Panel initialization 
		window.setSize(1280,720);//Size of window
		window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);//Able to close program
		window.getContentPane().setBackground(Color.black);//Colour of window
		window.setLayout(null);//Disable default layout for game
		window.setVisible(true);//To see the window
		con = window.getContentPane();//Base layer
		
		titleNamePanel = new JPanel();//Panel initialization 
		titleNamePanel.setBounds(330, 100, 650, 150);//Size and location of panel
		titleNamePanel.setBackground(Color.black);//Colour of panel
		titleNameLabel = new JLabel("Zombie Apocalypse");//Text for title to be placed on panel
		titleNameLabel.setForeground(Color.white);//Colour of Text
		titleNameLabel.setFont(titleFont);//Apply font to text
		
		startButtonPanel = new JPanel();//Initialization of button frame
		startButtonPanel.setBounds(530, 400, 200, 100);//Size and location of button frame
		startButtonPanel.setBackground(Color.black);//Colour of button frame
		startButton = new JButton("Begin Game");//Button initialization 
		startButton.setBackground(Color.black);//Colour of button background
		startButton.setForeground(Color.white);//Colour of text on top of button
		startButton.setFont(normalFont);//Apply font to button text
		startButton.addActionListener(tsHandler);//Forwards to "TitleScreenHandler" ActionListener when button is clicked
		startButton.setFocusPainted(false);//Disable button focus
		//Alternate way to remove focus: "startButton.setFocusable(false);"
		
		titleNamePanel.add(titleNameLabel);//Place text on Panel
		startButtonPanel.add(startButton);//Place button on panel
		
		con.add(titleNamePanel);//Add panel to container, (Text panel Layer)
		con.add(startButtonPanel);//Add panel to container, (Button layer)
		window.setVisible(true);//To see the window
	}
	
	public void createGameScreen(){
		
		titleNamePanel.setVisible(false);//Disables this panel when createGameScreen is called
		startButtonPanel.setVisible(false);//Disables this panel when createGameScreen is called
		mainTextPanel = new JPanel();//Text panel initialization 
		mainTextPanel.setBounds(80, 100, 1150, 250);//Size and location of panel
		mainTextPanel.setBackground(Color.black);//Colour of panel
		mainTextPanel.setOpaque(false);//Set panel to transparent
		con.add(mainTextPanel);//Add panel to container, (Text panel Layer)
		
		mainTextArea = new JTextArea();//Initializes placement for text
		mainTextArea.setBounds(100, 100, 1150, 250);//Size and location of area
		mainTextArea.setOpaque(false);//Set panel to transparent
		mainTextArea.setForeground(Color.white);//Colour of text in area
		mainTextArea.setFont(normalFont);//Apply font to text
		mainTextArea.setLineWrap(true);//Apply a text wrap function
		mainTextArea.setWrapStyleWord(true);//Apply a specific (word) text wrap function
		mainTextPanel.add(mainTextArea);//Add text area to Text panel, (Text area layer)
		
		choiceButtonPanel = new JPanel();//Initialization of button frame
		choiceButtonPanel.setBounds(210, 350, 800, 250);//Size and location of panel
		choiceButtonPanel.setOpaque(false);//Set panel to transparent
		choiceButtonPanel.setLayout(new GridLayout(4,1));//Formats buttons to four individual rows
		con.add(choiceButtonPanel);//Add panel to container, (Button layer)
		
		choice1 = new JButton("Choice 1");//Button initialization
		choice1.setOpaque(false);//Set button to transparent
		choice1.setForeground(Color.black);//Colour of text on top of button
		choice1.setFont(normalFont);//Apply font to text on button
		choice1.setFocusPainted(false);//Disable button focus
		choice1.addActionListener(choiceHandler);//Forwards to "ChoiceHandler" ActionListener when button is clicked
		choice1.setActionCommand("c1");//Identifies to program which specific choice this button correlates to
		choiceButtonPanel.add(choice1);//Add Button on panel
		
		choice2 = new JButton("Choice 2");//Button initialization
		choice2.setOpaque(false);//Set button to transparent
		choice2.setForeground(Color.black);//Colour of text on top of button
		choice2.setFont(normalFont);//Apply font to text on button
		choice2.setFocusPainted(false);//Disable button focus
		choice2.addActionListener(choiceHandler);//Forwards to "ChoiceHandler" ActionListener when button is clicked
		choice2.setActionCommand("c2");//Identifies to program which specific choice this button correlates to
		choiceButtonPanel.add(choice2);//Add Button on panel
		
		choice3 = new JButton("Choice 3");//Button initialization
		choice3.setOpaque(false);//Set button to transparent
		choice3.setForeground(Color.black);//Colour of text on top of button
		choice3.setFont(normalFont);//Apply font to text on button
		choice3.setFocusPainted(false);//Disable button focus
		choice3.addActionListener(choiceHandler);//Forwards to "ChoiceHandler" ActionListener when button is clicked
		choice3.setActionCommand("c3");//Identifies to program which specific choice this button correlates to
		choiceButtonPanel.add(choice3);//Add Button on panel
		
		choice4 = new JButton("Choice 4");//Button initialization
		choice4.setOpaque(false);//Set button to transparent
		choice4.setForeground(Color.black);//Colour of text on top of button
		choice4.setFont(normalFont);//Apply font to text on button
		choice4.setFocusPainted(false);//Disable button focus
		choice4.addActionListener(choiceHandler);//Forwards to "ChoiceHandler" ActionListener when button is clicked
		choice4.setActionCommand("c4");//Identifies to program which specific choice this button correlates to
		choiceButtonPanel.add(choice4);//Add Button on panel
		
		hpPanel = new JPanel();//Panel initialization to hold player health information
		hpPanel.setBounds(300, 20, 800, 50);//Size and location of panel
		hpPanel.setOpaque(false);//Set panel to transparent
		hpPanel.setBackground(Color.black);//Colour of panel
		hpPanel.setLayout(new GridLayout(1,4));//Layout of panel to four columns
		con.add(hpPanel);//Add panel to container
		
		weaponPanel = new JPanel();//Panel initialization to hold weapon information
		weaponPanel.setBounds(640, 20, 800, 50);//Size and location of panel
		weaponPanel.setOpaque(false);//Set panel to transparent
		weaponPanel.setBackground(Color.black);//Colour of panel
		weaponPanel.setLayout(new GridLayout(1,4));//Layout of panel to four columns
		con.add(weaponPanel);//Add panel to container
		
		playerPanel = new JPanel();//Panel initialization to hold player information
		playerPanel.setBounds(370, 20, 800, 50);//Size and location of panel
		playerPanel.setOpaque(false);//Set panel to transparent
		playerPanel.setBackground(Color.black);//Colour of panel
		playerPanel.setLayout(new GridLayout(1,4));//Layout of panel to four columns
		con.add(playerPanel);//Add panel to container
		
		hpLabel = new JLabel("HP:");//Text for HP label to be placed
		hpLabel.setFont(normalFont);//Font selection
		hpLabel.setForeground(Color.white);//Font colour
		hpPanel.add(hpLabel);//Add HP text to  panel
		
		hpLabelNumber = new JLabel();//Text for HP value to be placed
		hpLabelNumber.setFont(normalFont);//Font selection
		hpLabelNumber.setForeground(Color.white);//Font colour
		playerPanel.add(hpLabelNumber);//Add label to panel
		
		weaponLabel = new JLabel("Weapon:");//Text for weapon label to be placed
		weaponLabel.setFont(normalFont);//Font selection
		weaponLabel.setForeground(Color.white);//Font colour
		weaponPanel.add(weaponLabel);//Add label to panel
		
		weaponLabelName = new JLabel();//Text for weapon name to be placed
		weaponLabelName.setFont(normalFont);//Font selection
		weaponLabelName.setForeground(Color.white);//Font colour
		playerPanel.add(weaponLabelName);//Add label to panel
		
		imagePanel = new JPanel();//Panel initialization to hold weapon information
		imagePanel.setBounds(1, 1, 1280, 720);//Sets size of image panel
		imagePanel.setBackground(Color.white);//Sets image panel background colour
		
		imageLabel = new JLabel();//
		
		image = new ImageIcon(".//res//dforest.jpg");
		
		imageLabel.setIcon(image);
		imagePanel.add(imageLabel);
		
		con.add(imagePanel);//Adds image panel to the window
		
		playerSetup();//Directs program to playerSetup method
		
	}
	public void playerSetup(){//Initializes the playerSetup method
		playerHP = 100;//Set initial player's HP
		zombieHP = 100;//Set initial enemy's HP
		weapon = "Machete";//Set initial player's weapon
		weaponLabelName.setText(weapon);//Display weapon text on label
		hpLabelNumber.setText("" + playerHP);//Display integer HP value
		
		
		mainScreen();//Directs to main method
	}
	public void mainScreen(){//Initializes the playerSetup method
		playerPanel.validate();//Refreshes the panel
		playerPanel.repaint();//Tells program that panel needs refreshing
		choice2.setVisible(false);//Sets the buttons to invisible
		choice3.setVisible(false);//Sets the buttons to invisible
		choice4.setVisible(false);//Sets the buttons to invisible
		position = "mainScreen";//Indication of which method is currently running
		mainTextArea.setText("You are on a truck going to your best friend, Marty B’s,"
				+ "house  when you look out your driver's window to see something weird. "
				+ "You stop your truck to go out and see what it is and you notice that it is a humanoid figure in the woods."
				+ "You go to see if he is alright when you notice a foul smell and then see his literal dead stare looking right into your eyes, "
				+ "you see that he has a large piece of his shoulder bitten off with a disgusting amount of exposed skin. "
				+ "You ask him what happened but he only answers with a moan.You continue to stare back at the figure, then out of nowhere he attacks. ");//Placement for text
		choice1.setText("Continue");//Display text on button
		choice2.setText("");//Display text on button
		choice3.setText("");//Display text on button
		choice4.setText("");//Display text on button
	}
	public void mainScreencont(){//Initializes the playerSetup method
		playerPanel.validate();//Refreshes the panel
		playerPanel.repaint();//Tells program that panel needs refreshing
		choice2.setVisible(true);//Sets the buttons to invisible
		choice3.setVisible(true);//Sets the buttons to invisible
		choice4.setVisible(true);//Sets the buttons to invisible
		position = "mainScreencont";//Indication of which method is currently running
		mainTextArea.setText(" He starts running at you with that same dead stare locked onto you as his mouth is wide open."
				+ " You run as fast as you can back to your truck, lock the door and speed away with no hesitation."
				+ " When you are in the truck you keep asking yourself what that guy was doing,"
				+ " then you realize that even though you never thought the day would come,"
				+ " you realize that the world has gone into a ZOMBIE APOCALYPSE."
				+ " You keep driving to Marty B’s house that is just 10 minutes away and you see that the road is blocked by hundreds of humanoid figures"
				+ " similarly to the one that tried to eat you earlier."
				+ " You step on the brakes before getting any closer and…..You have to make a choice now, do you:");//Placement for text
		choice1.setText("Try to drive through the zombies");//Display text on button
		choice2.setText("Turn your truck around and try to find a different route");//Display text on button
		choice3.setText("Get out of your car and try to make it on foot by walking around the big mob");//Display text on button
		choice3.setFont(choiceFont);
		choice4.setText(" Try to fight through the zombies ");//Display text on button 
	}
	public void martysHouse(){//Initializes the martysHouse screen method
		playerPanel.validate();//Refreshes the panel
		playerPanel.repaint();//Tells program that panel needs refreshing
		imagePanel.setBounds(1, -100, 1920, 1080);
		image = new ImageIcon(".//res//dhouse.jpg");
		imageLabel.setIcon(image);
		choice2.setVisible(true);//Sets the buttons to visible
		choice3.setVisible(true);//Sets the buttons to visible
		choice4.setVisible(true);//Sets the buttons to visible
		position = "martysHouse";//Indication of which method is currently running
		mainTextArea.setText("You are in the Wizard's house.Marty is on his chair surrounded by zombies charging his really dying hard 9V batteries.What do you do?");//Placement for text
		choice1.setText("Approach the wizard carefully");//Display text on button
		choice2.setText("Attack him with a fully charged 9V battery");//Display text on button
		choice3.setText("Disconnect his power");//Display text on button
		choice4.setText("Run back out while you can");//Display text on button
		
	}
	public void talkMarty(){//Initializes the talkMarty screen method
		playerPanel.validate();//Refreshes the panel
		playerPanel.repaint();//Tells program that panel needs refreshing
		position = "talkMarty";//Indication of which method is currently running
		mainTextArea.setText("Hello PEEPUL!!Oh sorry, I did not realize that it's just you, (USERNAME)Would you like to watch an episode of 'Just for laughs' with me?");//Placement for text
		choice1.setText("RUNNNNNNNN!!!!!!!");//Display text on button
		choice2.setText("RUNNNNNNNN!!!!!!!");//Display text on button
		choice3.setText("RUNNNNNNNN!!!!!!!");//Display text on button
		choice4.setText("RUNNNNNNNN!!!!!!!");//Display text on button
	}
	public void attackMarty(){//Initializes the attackMarty screen method
		playerPanel.validate();//Refreshes the panel
		playerPanel.repaint();//Tells program that panel needs refreshing
		choice2.setVisible(false);//Sets the buttons to invisible
		choice3.setVisible(false);//Sets the buttons to invisible
		choice4.setVisible(false);//Sets the buttons to invisible
		position = "attackMarty";//Indication of which method is currently running
		mainTextArea.setText("Ok, but like SERIOUSLY?Do you ACTUALLY think you can beat the MASTER WIZAAARRD, MARTY B. HIMSELF?(You sustain the wraith of Marty B's powers and lose 3 health points)");//Placement for text
		playerHP = playerHP -3;//Change of integer HP value
		hpLabelNumber.setText(""+playerHP);//Display updated HP value
		choice1.setText("Continue");//Display text on button
		choice2.setText("");//Display text on button
		choice3.setText("");//Display text on button
		choice4.setText("");//Display text on button
	}
	public void forest(){//Initializes the forest screen method
		playerPanel.validate();//Refreshes the panel
		playerPanel.repaint();//Tells program that panel needs refreshing
		choice2.setVisible(true);//Sets the buttons to visible
		choice3.setVisible(true);//Sets the buttons to visible
		choice4.setVisible(true);//Sets the buttons to visible
		position = "forest";//Indication of which method is currently running
		mainTextArea.setText("You run as fast as possible deep into the forest behind Marty B's cabin.Which way do you proceed to run?");//Placement for text
		choice1.setText("Just keep running straight far away from Marty B. as possible");//Display text on button
		choice2.setText("Turn left and continue running");//Display text on button
		choice3.setText("Turn right and continue running");//Display text on button
		choice4.setText("I regret my decision and think Marty B. should be given a chance");//Display text on button
	}
	public void straightRun(){//Initializes the straightRun screen method
		playerPanel.validate();//Refreshes the panel
		playerPanel.repaint();//Tells program that panel needs refreshing
		choice2.setVisible(false);//Sets the buttons to invisible
		choice3.setVisible(false);//Sets the buttons to invisible
		choice4.setVisible(false);//Sets the buttons to invisible
		position = "straightRun";//Indication of which method is currently running
		mainTextArea.setText("You find a Monster drink possibly left behind by the last person that ventured here.(You gain 2 health points)");//Placement for text
		playerHP = playerHP + 2;//Change of integer HP value
		hpLabelNumber.setText(""+playerHP);//Display updated HP value
		choice1.setText("Resume your running");//Display text on button
		choice2.setText("");//Display text on button
		choice3.setText("");//Display text on button
		choice4.setText("");//Display text on button
		
	}
	public void leftRun(){//Initializes the leftRun screen method
		playerPanel.validate();//Refreshes the panel
		playerPanel.repaint();//Tells program that panel needs refreshing
		choice2.setVisible(true);//Sets the buttons to visible
		choice3.setVisible(true);//Sets the buttons to visible
		choice4.setVisible(true);//Sets the buttons to visible
		position = "leftRun";//Indication of which method is currently running
		mainTextArea.setText("As you run for your life, you notice something silver glimering under some leaves on the ground. (You have obtained a magical sword)");//Placement for text
		weapon = "Magic Sword";//Set player's new weapon
		weaponLabelName.setText(weapon);//Display weapon text on label
		choice1.setText("Go back to the forest");//Display text on button
		choice2.setText("");//Display text on button
		choice3.setText("");//Display text on button
		choice4.setText("");//Display text on button
	}
	public void rightRun(){//Initializes the rightRun screen method
		playerPanel.validate();//Refreshes the panel
		playerPanel.repaint();//Tells program that panel needs refreshing
		position = "rightRun";//Indication of which method is currently running
		mainTextArea.setText("A zombie jumps out of the nearby bush and attacks you!");//Placement for text
		choice1.setText("Fight it");//Display text on button
		choice2.setText("Run");//Display text on button
		choice3.setText("");//Display text on button
		choice4.setText("");//Display text on button
	}
	public void fight(){//Initializes the fight screen method
		playerPanel.validate();//Refreshes the panel
		playerPanel.repaint();//Tells program that panel needs refreshing
		position = "fight";//Indication of which method is currently running
		mainTextArea.setText("Zombie HP: " + zombieHP + "\n\nWhat do you do?");
		choice1.setText("Attack with your weapon");//Display text on button
		choice2.setText("Run");//Display text on button
		choice3.setText("");//Display text on button
		choice4.setText("");//Display text on button
	}
	public void playerAttack(){//Initializes the player attack screen method
		playerPanel.validate();//Refreshes the panel
		playerPanel.repaint();//Tells program that panel needs refreshing
		position = "playerAttack";//Indication of which method is currently running
		
		Random rand=new Random();
		
		int playerDamage = 0;//Set variable for damage player does
		
		if(weapon.equals("Machete")){//Indicating that if the Machete is equipped then continue below
			playerDamage = new java.util.Random().nextInt(50);//Allows to randomly pick the damage value that player does (0-49)
		}
		else if (weapon.equals("Magic Sword")){//Indicating that if the Magic Sword is equipped then continue below
			playerDamage = rand.nextInt(40) + 5;//Allows to randomly pick the damage value that player does (0-79)
		}
		
		mainTextArea.setText("You attacked the zombie and dealt " + playerDamage + " damage");//Placement for text
		
		zombieHP = zombieHP - playerDamage;//Calculation for enemy's health
		
		choice1.setText("Continue");//Display text on button
		choice2.setText("");//Display text on button
		choice3.setText("");//Display text on button
		choice4.setText("");//Display text on button
	}
	public void zombieAttack(){//Initializes the zombie attack screen method
		playerPanel.validate();//Refreshes the panel
		playerPanel.repaint();//Tells program that panel needs refreshing
		position = "zombieAttack";//Indication of which method is currently running
		
		int zombieDamage = 0;//Set variable for damage zombie does
		
		zombieDamage = new java.util.Random().nextInt(30);//Allows to randomly pick the damage value that zombie does (0-29)
		
		mainTextArea.setText("The zombie attacked and dealt " + zombieDamage + " damage");//Placement for text
		
		playerHP = playerHP - zombieDamage;//Calculation for player's health
		hpLabelNumber.setText(""+playerHP);//Display updated HP value
		
		choice1.setText("Continue");//Display text on button
		choice2.setText("");//Display text on button
		choice3.setText("");//Display text on button
		choice4.setText("");//Display text on button
	}
	public void win(){//Initializes the win screen method
		playerPanel.validate();//Refreshes the panel
		playerPanel.repaint();//Tells program that panel needs refreshing
		position = "win";//Indication of which method is currently running
		
		mainTextArea.setText("You have killed the zombie.");//Placement for text
	
		choice1.setText("Run back to the forest");//Display text on button
		choice2.setText("");//Display text on button
		choice3.setText("");//Display text on button
		choice4.setText("");//Display text on button
	}
	public void lose(){//Initializes the lose screen method
		playerPanel.validate();//Refreshes the panel
		playerPanel.repaint();//Tells program that panel needs refreshing
		position = "lose";//Indication of which method is currently running
		
		mainTextArea.setText("You are dead.\n\nGAME OVER");//Placement for text
		
		choice1.setText("");//Display text on button
		choice2.setText("");//Display text on button
		choice3.setText("");//Display text on button
		choice4.setText("");//Display text on button
		choice1.setVisible(false);//Sets the buttons to invisible
		choice2.setVisible(false);//Sets the buttons to invisible
		choice3.setVisible(false);//Sets the buttons to invisible
		choice4.setVisible(false);//Sets the buttons to invisible
	}
	
	
	
	
	
	
	
	
	
	public class TitleScreenHandler implements ActionListener{//Interface for receiving an action event (Button press)
		
		public void actionPerformed(ActionEvent event){//Indicates that an action has occurred
			
			createGameScreen();//This is called after action has been detected
	  }
   }
	public class ChoiceHandler implements ActionListener{//Interface for receiving an action event (Button press)
		
		public void actionPerformed(ActionEvent event){//Indicates that an action has occurred
			
			String yourChoice = event.getActionCommand();//Recognizes which choice button is clicked
			
			switch(position){//Determines which method is being processed
			case "mainScreen"://Indicates which method is being processed
				switch(yourChoice){//Determines which choice button was clicked
				case "c1": mainScreencont(); break;//Result of choice 1 button click
				case "c2": break;//Result of choice 2 button click
				case "c3": break;//Result of choice 3 button click
				case "c4": break;//Result of choice 4 button click
				} 
				break;
			case "mainScreencont"://Indicates which method is being processed
				switch(yourChoice){//Determines which choice button was clicked
				case "c1": martysHouse(); break;//Result of choice 1 button click
				case "c2":  martysHouse();break;//Result of choice 2 button click
				case "c3":  martysHouse();break;//Result of choice 3 button click
				case "c4":  martysHouse();break;//Result of choice 4 button click
				} 
				break;
			case "martysHouse"://Indicates which method is being processed
				switch(yourChoice){//Determines which choice button was clicked
				case "c1": talkMarty(); break;//Result of choice 1 button click
				case "c2": attackMarty(); break;//Result of choice 2 button click
				case "c3": break;//Result of choice 3 button click
				case "c4": forest(); break;//Result of choice 4 button click
				} 
				break;
			case "talkMarty"://Indicates which method is being processed
				switch(yourChoice){//Determines which choice button was clicked
				case "c1": mainScreen(); break;//Result of choice 1 button click
				case "c2": mainScreen(); break;//Result of choice 2 button click
				case "c3": mainScreen(); break;//Result of choice 3 button click
				case "c4": mainScreen(); break;//Result of choice 4 button click
				}
				break;
			case "attackMarty"://Indicates which method is being processed
				switch(yourChoice){//Determines which choice button was clicked
				case "c1":  break;//Result of choice 1 button click
				case "c2":  break;//Result of choice 2 button click
				case "c3":  break;//Result of choice 3 button click
				case "c4":  break;//Result of choice 4 button click
				}
				break;
			case "forest"://Indicates which method is being processed
				switch(yourChoice){//Determines which choice button was clicked
				case "c1": straightRun(); break;//Result of choice 1 button click
				case "c2": leftRun(); break;//Result of choice 2 button click
				case "c3": rightRun(); break;//Result of choice 3 button click
				case "c4": attackMarty(); break;//Result of choice 4 button click
				}
				break;
			case "leftRun"://Indicates which method is being processed
				switch(yourChoice){//Determines which choice button was clicked
				case "c1": forest(); break;//Result of choice 1 button click
				case "c2":  break;//Result of choice 2 button click
				case "c3":  break;//Result of choice 3 button click
				case "c4":  break;//Result of choice 4 button click
				}
				break;
			case "rightRun"://Indicates which method is being processed
				switch(yourChoice){//Determines which choice button was clicked
				case "c1": fight(); break;//Result of choice 1 button click
				case "c2": forest(); break;//Result of choice 2 button click
				case "c3":  break;//Result of choice 3 button click
				case "c4":  break;//Result of choice 4 button click
				}
				break;
			case "fight"://Indicates which method is being processed
				switch(yourChoice){//Determines which choice button was clicked
				case "c1": playerAttack(); break;//Result of choice 1 button click
				case "c2": forest(); break;//Result of choice 2 button click
				case "c3":  break;//Result of choice 3 button click
				case "c4":  break;//Result of choice 4 button click
				}
				break;
			case "playerAttack"://Indicates which method is being processed
				switch(yourChoice){//Determines which choice button was clicked
				case "c1": 
					if(zombieHP<1){//Checks if zombie's health is less than 1
						win();//If health less than one, then win method is called
					}
					else{
						zombieAttack();//If health more than one, then zombie attack method is called
					}
							break;//Result of choice 1 button click
				case "c2":  break;//Result of choice 2 button click
				case "c3":  break;//Result of choice 3 button click
				case "c4":  break;//Result of choice 4 button click
				}
				break;
			case "zombieAttack"://Indicates which method is being processed
				switch(yourChoice){//Determines which choice button was clicked
				case "c1":  
					if(playerHP<1){//Checks if player's health is less than 1
						lose();//If health less than one, then lose method is called
					}
					else{
						fight();//If health more than one, then fight method is called
					}
							break;//Result of choice 1 button click
				case "c2":  break;//Result of choice 2 button click
				case "c3":  break;//Result of choice 3 button click
				case "c4":  break;//Result of choice 4 button click
				}
				break;
			case "win"://Indicates which method is being processed
				switch(yourChoice){//Determines which choice button was clicked
				case "c1": forest(); break;//Result of choice 1 button click
				case "c2":  break;//Result of choice 2 button click
				case "c3":  break;//Result of choice 3 button click
				case "c4":  break;//Result of choice 4 button click
				}
			}
		}
	}
	
	
	
}
